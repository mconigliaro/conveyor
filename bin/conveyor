#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import ConfigParser
import logging
import logging.handlers
import optparse
import os
import socket
import string
import sys
import time

try:
    import conveyor
except ImportError:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir)))
    import conveyor


op = optparse.OptionParser(
    description='Daemon program for Conveyor - used to watch for and deploy new applications',
    version=conveyor.__version__,
    epilog="%s was written by %s <%s>\n%s" % (conveyor.__name__, conveyor.__author__, conveyor.__author_email__, conveyor.__url__))

op.set_defaults(
    config_files=', '.join([os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, 'conf', 'conveyor.conf')), '/etc/conveyor/conveyor.conf']),
    servers='localhost:2181/conveyor',
    timeout='10',
    host_id=socket.getfqdn(),
    groups=None,
    log_level='info',
    log_file_path=None,
    log_file_rotate_interval_type='d',
    log_file_rotate_interval='7',
    log_file_max_backups='4'
)

og = optparse.OptionGroup(op, 'General Options')
og.add_option('--config-files',
              dest='config_files',
              help="comma-separated list of configuration files (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Session Options')
og.add_option('--servers',
              dest='servers',
              help="zookeeper connection string (default: %default)")
og.add_option('--timeout',
              dest='timeout',
              type='int',
              help="zookeeper connection timeout (default: %default)")
og.add_option('--host-id',
              dest='host_id',
              help="host id (default: %default)")
og.add_option('--groups',
              dest='groups',
              help="comma-separated list of groups (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Output and Logging Options')
og.add_option('--log-level',
              dest='log_level',
              type='choice',
              choices=['critical', 'error', 'warning', 'info', 'debug'],
              help="critical, error, warning, info, debug (default: %default)")
og.add_option('--log-file-path',
              dest='log_file_path',
              help="path for optional log file (default: %default)")
og.add_option('--log-file-rotate-interval-type',
              dest='log_file_rotate_interval_type',
              type='choice',
              choices=['s', 'm', 'h', 'd', 'w', 'midnight'],
              help="s=seconds, m=minutes, h=hours, d=days, w=week day (0=monday), midnight (default: %default)")
og.add_option('--log-file-rotate-interval',
              dest='log_file_rotate_interval',
              type='int',
              help="log rotation interval (default: %default)")
og.add_option('--log-file-max-backups',
              dest='log_file_max_backups',
              type='int',
              help="number of log files to keep when rotating (default: %default)")
op.add_option_group(og)

(options, args) = op.parse_args()
options.groups = conveyor.util.comma_str_to_list(options.groups)

config = ConfigParser.SafeConfigParser(defaults={
    'servers': options.servers,
    'timeout': options.timeout,
    'host-id': options.host_id,
    'groups': options.groups,
    'log-level': options.log_level,
    'log-file-path': options.log_file_path,
    'log-file-rotate-interval-type': options.log_file_rotate_interval_type,
    'log-file-rotate-interval': options.log_file_rotate_interval,
    'log-file-max-backups': options.log_file_max_backups
})
config.read(conveyor.util.comma_str_to_list(options.config_files))


logging.getLogger().setLevel(getattr(logging, options.log_level.upper()))
console_logger = logging.StreamHandler()
log_format = logging.Formatter("%(asctime)s %(levelname)s: %(message)s")
console_logger.setFormatter(log_format)
logging.getLogger().addHandler(console_logger)
if options.log_file_path:
    fileLogger = logging.handlers.TimedRotatingFileHandler(
        filename = options.log_file_path,
        when = options.log_file_rotate_interval_type,
        interval = options.log_file_rotate_interval,
        backupCount = options.log_file_max_backups)
    fileLogger.setFormatter(log_format)
    logging.getLogger().addHandler(fileLogger)


try:
    client = conveyor.Conveyor(servers=options.servers, timeout=options.timeout, host_id=options.host_id, groups=options.groups)
    while True:
        time.sleep(1)

except KeyboardInterrupt:
    client.close()
