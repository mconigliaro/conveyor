#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import ConfigParser
import logging
import optparse
import os
import socket
import string
import sys
import time

if string.find(os.path.abspath(sys.argv[0]), os.sep+'conveyor') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
if hasattr(os, "getuid") and os.getuid() != 0:
    sys.path.insert(0, os.path.abspath(os.getcwd()))

import conveyor


config = ConfigParser.SafeConfigParser(defaults={
    'servers': 'localhost:2181/conveyor',
    'timeout': '10',
    'host-id': socket.getfqdn(),
    'groups': '',
    'log-level': 'info',
    'log-file-path': '',
    'log-file-rotate-interval-type': 'd',
    'log-file-rotate-interval': '7',
    'log-file-max-backups': '4'
})
config.read([os.path.join(sys.path[0], './conf/conveyor.conf'), '/etc/conveyor/conveyor.conf'])


op = optparse.OptionParser("usage: %prog [options]")

og = optparse.OptionGroup(op, 'Session Options')
og.add_option('--servers',
              dest='servers',
              default=config.get('session', 'servers'),
              help="zookeeper connection string (default: %default)")
og.add_option('--timeout',
              dest='timeout',
              type='int',
              default=config.getint('session', 'timeout'),
              help="zookeeper connection timeout (default: %default)")
og.add_option('--host-id',
              dest='host_id',
              default=config.get('session', 'host-id'),
              help="host id (default: %default)")
og.add_option('--groups',
              dest='groups',
              default=config.get('session', 'groups'),
              help="comma-separated list of groups")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Deployment Options')
og.add_option('--get-version-cmd',
              dest='get_version_cmd',
              default=config.get('deployment', 'get-version-cmd', raw=True),
              help="command to get version (default: %default)")
og.add_option('--deploy-cmd',
              dest='deploy_cmd',
              default=config.get('deployment', 'deploy-cmd', raw=True),
              help="deployment command (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Output and Logging Options')
og.add_option('--log-level',
              dest='log_level',
              type='choice',
              choices=['critical', 'error', 'warning', 'info', 'debug'],
              default=config.get('logging', 'log-level'),
              help="critical, error, warning, info, debug (default: %default)")
og.add_option('--log-file-path',
              dest='log_file_path',
              help="path for optional log file")
og.add_option('--log-file-rotate-interval-type',
              dest='log_file_rotate_interval_type',
              type='choice',
              choices=['s', 'm', 'h', 'd', 'w', 'midnight'],
              default=config.get('logging', 'log-file-rotate-interval-type'),
              help="s=seconds, m=minutes, h=hours, d=days, w=week day (0=monday), midnight (default: %default)")
og.add_option('--log-file-rotate-interval',
              dest='log_file_rotate_interval',
              type='int',
              default=config.getint('logging', 'log-file-rotate-interval'),
              help="log rotation interval (default: %default)")
og.add_option('--log-file-max-backups',
              dest='log_file_max_backups',
              type='int',
              default=config.getint('logging', 'log-file-max-backups'),
              help="number of log files to keep when rotating (default: %default)")
op.add_option_group(og)

(options, args) = op.parse_args()
options.groups = list(set(map(string.strip, options.groups.split(',')))) # remove duplicate groups


logging.getLogger().setLevel(getattr(logging, options.log_level.upper()))
console_logger = logging.StreamHandler()
console_logger.setFormatter(logging.Formatter("%(levelname)s: %(message)s"))
logging.getLogger().addHandler(console_logger)
if options.log_file_path:
    fileLogger = logging.handlers.TimedRotatingFileHandler(
        filename = options.log_file_path,
        when = options.log_file_rotate_interval_type,
        interval = options.log_file_rotate_interval,
        backupCount = options.log_file_max_backups)
    fileLogger.setFormatter(logging.Formatter("%(asctime)s %(levelname)s: %(message)s"))
    logging.getLogger().addHandler(fileLogger)


try:
    client = conveyor.Conveyor(servers=options.servers, timeout=options.timeout, host_id=options.host_id, groups=options.groups, get_version_cmd=options.get_version_cmd, deploy_cmd=options.deploy_cmd)
    while True:
        time.sleep(1)

except KeyboardInterrupt:
    client.close()
