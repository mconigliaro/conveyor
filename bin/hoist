#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import ConfigParser
import logging
import optparse
import os
import pprint
import re
import string
import sys
import traceback

if string.find(os.path.abspath(sys.argv[0]), os.sep+'conveyor') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
if hasattr(os, "getuid") and os.getuid() != 0:
    sys.path.insert(0, os.path.abspath(os.getcwd()))

import conveyor


op = optparse.OptionParser(
    usage="%prog [options] [ application create NAME VERSION | < application | host > delete NAME | < application | host > list | < application | host > get NAME ]",
    description='Command line client for Conveyor - used to manage data within ZooKeeper',
    version=conveyor.__version__,
    epilog="%s was written by %s <%s>\n%s" % (conveyor.__name__, conveyor.__author__, conveyor.__author_email__, conveyor.__url__))

op.set_defaults(
    config_files=', '.join([os.path.join(os.path.dirname(__file__), '..', 'conf', 'hoist.conf'), '/etc/conveyor/hoist.conf']),
    servers='localhost:2181/conveyor',
    timeout='10',
    groups=None,
    slots=1,
    slot_increment=1,
    get_version_cmd=None,
    deploy_cmd=None
)

og = optparse.OptionGroup(op, 'General Options')
og.add_option('--config-files',
              dest='config_files',
              help="comma-separated list of configuration files (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Session Options')
og.add_option('--servers',
              dest='servers',
              help="zookeeper connection string (default: %default)")
og.add_option('--timeout',
              dest='timeout',
              type='int',
              help="zookeeper connection timeout (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Application Creation Options')
og.add_option('--groups',
              dest='groups',
              help="comma-separated list of groups (default: %default)")
og.add_option('--slots',
              dest='slots',
              type='int',
              help="initial deployment slots (default: %default)")
og.add_option('--slot-increment',
              dest='slot_increment',
              type='int',
              help="deployment slot increment (default: %default)")
og.add_option('--get-version-cmd',
              dest='get_version_cmd',
              help="command to get version (default: %default)")
og.add_option('--deploy-cmd',
              dest='deploy_cmd',
              help="deployment command (default: %default)")
op.add_option_group(og)

og = optparse.OptionGroup(op, 'Output and Logging Options')
og.add_option('--log-level',
              dest='log_level',
              type='choice',
              choices=['critical', 'error', 'warning', 'info', 'debug'],
              help="critical, error, warning, info, debug  (default: %default)")
op.add_option_group(og)

(options, args) = op.parse_args()


config = ConfigParser.SafeConfigParser(defaults={
    'servers': options.servers,
    'timeout': options.timeout,
    'groups': options.groups,
    'slots': options.slots,
    'slot-increment': options.slot_increment,
    'get-version-cmd': options.get_version_cmd,
    'deploy-cmd': options.deploy_cmd
})
config.read(conveyor.util.comma_str_to_list(options.config_files))


if options.log_level:
    conveyor.logging.getLogger().setLevel(getattr(logging, options.log_level.upper()))
    console_logger = logging.StreamHandler()
    console_logger.setFormatter(logging.Formatter("%(asctime)s %(levelname)s: %(message)s"))
    logging.getLogger().addHandler(console_logger)


try:
    client = conveyor.Conveyor(servers=options.servers, timeout=options.timeout)

    args_str = ' '.join(args).strip()

    if re.match('^application create .+? .+?$', args_str):

        config_sources = []

        try:
            config_sources.append(config.items('application:DEFAULT', raw=True))
        except ConfigParser.NoSectionError:
            pass

        try:
            config_sources.append(config.items('application:' + args[2], raw=True))
        except ConfigParser.NoSectionError:
            pass

        config_sources.append(eval(str(options))) # haha

        config_sources.append({
            'name': args[2],
            'version': args[3]
        })

        data = conveyor.util.read_options(*config_sources, to_list=['groups'])
        path = conveyor.zookeeper.path_join('applications', args[2])

        pprint.PrettyPrinter().pprint(config_sources)
        pprint.PrettyPrinter().pprint(data)
        pprint.PrettyPrinter().pprint(conveyor.nodes.Application(path=path, data=data).write(handle=client.handle).data)

    elif re.match('^(application|host) delete .+?$', args_str):
        path = conveyor.zookeeper.path_join(args[0] + 's', args[2])
        conveyor.nodes.delete(handle=client.handle, path=path)

    elif re.match('^(application|host) list$', args_str):
        path = conveyor.zookeeper.path_join(args[0] + 's')
        pprint.PrettyPrinter().pprint(conveyor.nodes.list_children(handle=client.handle, path=path))

    elif re.match('^(application|host) get .+?$', args_str):
        class_name = getattr(conveyor.nodes, args[0].capitalize())
        path = conveyor.zookeeper.path_join(args[0] + 's', args[2])
        pprint.PrettyPrinter().pprint(class_name.read(handle=client.handle, path=path).data)

    else:
        op.print_help()
        sys.exit(1)

except SystemExit:
    sys.exit(1)

except:
    traceback.print_exc()
    sys.exit(1)

finally:
    client.close()
